---
import Challenge from '@/layouts/Challenge.astro';
---
<Challenge>
    
    <section class="page">

        <header class="page-header">
            <h2>Extensions</h2>

            <button class="button" data-actio="theme-toggle">
                <span>Toggle Theme</span>
            </button>
        </header>
        
        <section class="listing extensions">
            
            <header>
                <h1>Extensions List</h1>

                <section class="filter">
                    <input type="radio" name="extensions-list-filter" value="all" id="extensions-list-filter-all" checked>
                    <label class="button" for="extensions-list-filter-all">All</label>
                    <input type="radio" name="extensions-list-filter" value="active" id="extensions-list-filter-active">
                    <label class="button" for="extensions-list-filter-active">Active</label>
                    <input type="radio" name="extensions-list-filter" value="inactive" id="extensions-list-filter-inactive">
                    <label class="button" for="extensions-list-filter-inactive">Inactive</label>
                </section>
            </header>
                
            <section class="list"></section>

        </section>

    </section>

    <template id="extension-entry">
        <article class="extension">
            <section class="media">
                <img src="" alt="" class="logo">
            </section>
            <section class="content">
                <h2 class="title"></h2>
                <p class="description"></p>
            </section>
            <section class="actions">
                <button class="button danger" data-action="remove">Remove</button>
                <input type="checkbox" name="is-active" class="state">
            </section>
        </article>
    </template>

    <script is:inline>

        async function loadExtensions() {
            try {
                const response = await fetch('/challenge/browser-extension-manager/assets/data/extensions.json');
                const extensions = await response.json();

                const list = document.querySelector(".listing.extensions .list");
                const entryTemplate = document.querySelector("#extension-entry");
                
                function actionRemove(e) {
                    e.target.closest('.extension').remove();
                }

                extensions.forEach(extension => {
                    
                    const entry = entryTemplate.content.cloneNode(true);

                    entry.querySelector('.logo').src = extension.logo;
                    entry.querySelector('.title').textContent = extension.name;
                    entry.querySelector('.description').textContent = extension.description;
                    entry.querySelector('.state').checked = extension.isActive;
                    entry.querySelector('.button[data-action="remove"]').addEventListener('click', actionRemove);

                    list.append(entry);

                });
            } catch (error) {
                console.error('Error loading extensions:', error);
            }
        }

        if ("content" in document.createElement("template")) {
            loadExtensions();
        }
    </script>

</Challenge>
<style is:global>

    @layer variables, reset, typography, layout, components;

    @layer variables {
        :root {
            --clr-light-gradient: linear-gradient(180deg, #EBF2FC 0%, #EEF8F9 100%);
            --clr-dark-gradient: linear-gradient(180deg, #040918 0%, #091540 100%);

            --clr-bgrd: #FFF;
            --clr-text: #000;

            --clr-border: #CCC;
        }
    }

    @layer reset {
        * {
            padding: 0;
            margin: 0;
        }

        *, *::before, *::after {
            box-sizing: inherit;
        }

        html {
            box-sizing: inherit;
        }
    }

    @layer typography {

    }

    @layer layout {
        .page {
            padding: 2em;
            max-width: 140ch;
            margin: 0 auto;
        }
    }

    @layer components {

        .listing {

            header {
                display: flex;
                flex-wrap: wrap;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 2em;
            }

            .filter {
                display: flex;
                gap: 1em;

                label {

                }

                input {
                    position: absolute;
                    top: 0;
                    left: 0;
                    visibility: hidden;
                }
            }

            input:checked + label {
                background-color: orange;
            }

            &:has(#extensions-list-filter-all:checked) {

            }

            &:has(#extensions-list-filter-active:checked) {
                .extension:has(.state:not(:checked)) {
                    display: none;
                }
            }

            &:has(#extensions-list-filter-inactive:checked) {
                .extension:has(.state:checked) {
                    display: none;
                }
            }
        }

        .list {
            --size-column-min: 36ch;

            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(var(--size-column-min), 1fr));
            gap: 1em;
        }

        .extension {
            display: flex;
            flex-wrap: wrap;
            padding: 1.5em;
            gap: 1rem;
            border-radius: 1.2em;
            background: #EEE;
            border: 1px solid #CCC;
            
            & > * {
                flex: 0 1 auto;
            }

            .media {

            }

            .content {
                flex: 1 1 50%;
            }

            .actions {
                flex-basis: 100%;
                margin-top: auto;
                padding-top: 1em;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
        }

        .button {
            display: block;
            border: 1px solid var(--clr-border);
            padding: 0.5em 1em;
            border-radius: 2em;
            cursor: pointer;

            &:hover {
                background: #C00;
                color: #fff;
            }
        }
    }

</style>